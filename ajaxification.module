<?php

// @todo: check IE8
// @todo: update readme

require_once 'ajaxification.hacks.inc';

/**
 * Implements hook_permission().
 */
function aggregator_permission() {
  return array(
    'administer ajaxification configurations' => array(
      'title' => t('Administer Ajaxification configurations'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ajaxification_menu() {
  $items = array();
  $items['admin/config/user-interface/ajaxification'] = array(
    'title' => t('Ajaxification'),
    'page callback' => 'ajaxification_configurations_page',
    'access arguments' => array('administer ajaxification configurations'),
    'file' => 'ajaxification.admin.inc',
  );
  $items['admin/config/user-interface/ajaxification/configurations'] = array(
    'title' => t('Configurations'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/user-interface/ajaxification/configurations/add'] = array(
    'title' => t('Add configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ajaxification_configuration_form'),
    'access arguments' => array('administer ajaxification configurations'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'ajaxification.admin.inc',
  );
  $items['admin/config/user-interface/ajaxification/configurations/edit/%ajaxification_cfg'] = array(
    'title' => t('Edit configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ajaxification_configuration_form', 6),
    'access arguments' => array('administer ajaxification configurations'),
    'file' => 'ajaxification.admin.inc',
  );
  $items['admin/config/user-interface/ajaxification/configurations/delete/%ajaxification_cfg'] = array(
    'title' => t('Delete configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ajaxification_configuration_delete_form', 6),
    'access arguments' => array('administer ajaxification configurations'),
    'file' => 'ajaxification.admin.inc',
  );
  $items['admin/config/user-interface/ajaxification/configurations/export/%ajaxification_cfg'] = array(
    'title' => t('Export configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ajaxification_configuration_export_form', 6),
    'access arguments' => array('administer ajaxification configurations'),
    'file' => 'ajaxification.admin.inc',
  );
  $items['admin/config/user-interface/ajaxification/configurations/import'] = array(
    'title' => t('Import configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ajaxification_configuration_import_form'),
    'access arguments' => array('administer ajaxification configurations'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'ajaxification.admin.inc',
  );
  $items['admin/config/user-interface/ajaxification/settings'] = array(
    'title' => t('Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ajaxification_settings_form'),
    'access arguments' => array('administer ajaxification configurations'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ajaxification.admin.inc',
  );
  return $items;
}

/**
 * Configuration load callback.
 *
 * @param string $cfg_id
 *   Configuration ID.
 *
 * @return array|bool
 *   Configuration array or FALSE.
 */
function ajaxification_cfg_load($cfg_id) {
  return _ajaxification_validate_cfg(variable_get('ajaxification_configuration_' . $cfg_id));
}

/**
 * Implements hook_init().
 */
function ajaxification_init() {

  // Reload page if theme has changed.
  if (_ajaxification_get_active_configuration()
      && isset($_REQUEST['ajaxification_page_state'])
      && is_string($_REQUEST['ajaxification_page_state'])
      && preg_match('#[^-]+#', $_REQUEST['ajaxification_page_state'], $matches)) {
    $theme = $matches[0];
    if ($theme != $GLOBALS['theme']) {
      _ajaxification_page_reload();
    }
  }

  _ajaxification_the_last_alter('js');
  _ajaxification_the_last_alter('css');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ajaxification_preprocess_html(&$html) {
  $configurations = _ajaxification_get_configurations();
  if (empty($configurations)) {
    return;
  }
  foreach ($configurations as $id => $configuration) {
    // Description is administrative only. Do not pass to the front-end.
    unset($configurations[$id]['description']);
  }
  $path = drupal_get_path('module', 'ajaxification');
  drupal_add_css($path . '/ajaxification.css');
  drupal_add_js($path . '/ajaxification.js', array(
    'scope' => 'footer',
  ));
  drupal_add_js(array(
    'ajaxification' => array(
      'configurations' => $configurations,
    ),
  ), 'setting');
  if (file_exists('sites/all/libraries/jgrowl/jquery.jgrowl.js')) {
    drupal_add_js('sites/all/libraries/jgrowl/jquery.jgrowl.js', array(
      'scope' => 'footer',
    ));
    drupal_add_css('sites/all/libraries/jgrowl/jquery.jgrowl.css', array(
      'scope' => 'footer',
    ));
  }
  drupal_add_library('system', 'drupal.ajax');
}

/**
 * Implements hook_drupal_goto_alter().
 */
function ajaxification_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  if ($configuration = _ajaxification_get_active_configuration()) {
    $options['query']['ajaxification_cfg_id'] = $configuration['id'];
    $options['query']['ajaxification_page_state'] = $_REQUEST['ajaxification_page_state'];
    $options['ajaxification_url_outbound_alter_disabled'] = TRUE;
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function ajaxification_url_outbound_alter(&$path, &$options, $original_path) {
  if (!empty($options['ajaxification_url_outbound_alter_disabled'])) {
    return;
  }

  // Some code may preserve all query parameters. Avoid this.
  if (isset($options['query']['ajaxification_cfg_id'])) {
    unset($options['query']['ajaxification_cfg_id']);
  }
  if (isset($options['query']['ajaxification_page_state'])) {
    unset($options['query']['ajaxification_page_state']);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function ajaxification_module_implements_alter(&$implementations, $hook) {
  $run_last = array(
    'page_delivery_callback_alter',
    'drupal_goto_alter',
    'url_outbound_alter',
  );
  if (in_array($hook, $run_last)) {
    $group = $implementations['ajaxification'];
    unset($implementations['ajaxification']);
    $implementations['ajaxification'] = $group;
  }
}

/**
 * Implements hook_js_alter().
 */
function ajaxification_js_alter(&$js) {
  _ajaxification_process_resources($js, 'js');
}

/**
 * Implements hook_css_alter().
 */
function ajaxification_css_alter(&$css) {
  _ajaxification_process_resources($css, 'css');
}

/**
 * Implements hook_page_delivery_callback_alter().
 */
function ajaxification_page_delivery_callback_alter(&$callback) {
  if (_ajaxification_get_active_configuration()) {
    $callback = 'ajaxification_deliver_page';
  }
}

/**
 * Delivery callback.
 */
function ajaxification_deliver_page($page_callback_result) {
  if (!isset($page_callback_result) || is_int($page_callback_result)) {
    _ajaxification_page_reload();
  }
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  $url = _ajaxification_current_url();
  $messages = theme('status_messages');
  $html = drupal_render_page($page_callback_result);
  $configuration = _ajaxification_get_active_configuration();
  $data = _ajaxification_parse_response_data($html, $configuration);

  _ajaxification_process_ajax_page_state();
  $ajax_commands = _ajaxification_ajax_render();

  print(drupal_json_encode(array(
    'url' => $url,
    'ajax_commands' => drupal_json_decode($ajax_commands),
    'messages' => $messages,
  ) + $data));
}

/**
 * Converts shorten ajax page state to the normal one, so Drupal can use it.
 */
function _ajaxification_process_ajax_page_state() {
  if (!isset($_REQUEST['ajaxification_page_state']) || !is_string($_REQUEST['ajaxification_page_state'])) {
    return;
  }
  $page_state = explode('-', $_REQUEST['ajaxification_page_state']);
  if (count($page_state) < 2) {
    return;
  }
  $_POST['ajax_page_state']['theme'] = (string) array_shift($page_state);
  $_POST['ajax_page_state']['theme_token'] = (string) array_shift($page_state);
  $map = _ajaxification_resource_to_id_map();
  foreach ($page_state as $resource_id) {
    foreach ($map as $type => $_) {
      if (($key = array_search($resource_id, $map[$type])) !== FALSE) {
        $_POST['ajax_page_state'][$type][$key] = 1;
        break;
      }
    }
  }
}

/**
 * Parses HTML and fetches some data from it.
 *
 * @param string $html
 *   Document HTML code.
 * @param array $configuration
 *   Currently active configuration.
 *
 * @return array
 *   Array contains:
 *   - "bodyClass": the content os the class attribute of the body tag.
 *   - "pageTitle": head > title inner HTML
 *   - "h1": contents of the h1 tag; if document contains more/less than one h1
 *     tag, it's skipped
 *   - "content": the content (as a string) of the replaceWrapper
 */
function _ajaxification_parse_response_data($html, $configuration) {
  $data = array();

  if (function_exists('libxml_use_internal_errors')) {
    libxml_use_internal_errors(TRUE);
  }
  // UTF-8 fix from http://php.net/manual/en/domdocument.loadhtml.php#95251
  $doc = new DOMDocument();
  $doc->strictErrorChecking = FALSE;
  $doc->loadHTML('<?xml encoding="UTF-8">' . $html);
  foreach ($doc->childNodes as $item) {
    if ($item->nodeType == XML_PI_NODE) {
      $doc->removeChild($item);
    }
  }
  $doc->encoding = 'UTF-8';

  $data['bodyClass'] = qp($doc, 'body')->attr('class');
  $data['pageTitle'] = qp($doc, 'head title')->innerHTML();
  $h1 = qp($doc, 'h1e');
  if ($h1->size() === 1) {
    $data['h1'] = $h1->innerHTML();
  }

  $selector = $configuration['selectors']['replaceWrapper'];
  if (isset($configuration['selectors']['replaceWrapperContext'])) {
    $selector = $configuration['selectors']['replaceWrapperContext'] . ' ' . $selector;
  }
  $data['content'] = qp($doc, $selector)->innerHTML();

  return $data;
}

/**
 * Returns all defined configurations.
 *
 * @return array
 */
function _ajaxification_get_configurations() {
  $configurations =& drupal_static(__FUNCTION__);
  if ($configurations === NULL) {
    $query = db_select('variable', 'v');
    $query->condition('v.name', 'ajaxification_configuration_%', 'LIKE');
    $alias = $query->addExpression('SUBSTR(v.name, 29)');
    $query->orderBy($alias);
    $ids = $query->execute()->fetchCol();
    $configurations = array_filter(array_map('ajaxification_cfg_load', drupal_map_assoc($ids)));
  }
  return $configurations;
}

/**
 * Validates ajaxification configuration.
 *
 * @param array $cfg
 *   Configuration to validate.
 * @param array|null $form
 *   If there is validation error and form is provided: form error will be set.
 *
 * @return array|bool
 *   Returns configuration on successful validation. FALSE otherwise.
 */
function _ajaxification_validate_cfg($cfg, &$form = NULL) {
  if (!is_array($cfg) || !isset($cfg['id']) || !is_string($cfg['id'])) {
    return FALSE;
  }
  $cfg['id'] = trim($cfg['id']);
  if ($cfg['id'] === '') {
    return FALSE;
  }
  if (preg_match('#[^a-zA-Z0-9_]#', $cfg['id'])) {
    if ($form) {
      form_error($form['id'], t('Identifier must only contain letters, numbers, and underscore symbol.'));
    }
    return FALSE;
  }
  if (empty($cfg['selectors']['replaceWrapper'])) {
    return FALSE;
  }
  return $cfg;
}

/**
 * Returns currently active configuration.
 *
 * @return array|null
 */
function _ajaxification_get_active_configuration() {
  $return =& drupal_static(__FUNCTION__, FALSE);
  if ($return === FALSE) {
    $return = NULL;
    if (isset($_REQUEST['ajaxification_cfg_id']) && is_string($_REQUEST['ajaxification_cfg_id'])) {
      $configurations = _ajaxification_get_configurations();
      if (isset($configurations[$_REQUEST['ajaxification_cfg_id']])) {
        $return = $configurations[$_REQUEST['ajaxification_cfg_id']];
      }
    }
  }
  return $return;
}

/**
 * Updates resource-to-id map, and adds that map as JS setting.
 *
 * @param array $data
 *   JS or CSS array that comes from hook_js_alter() or hook_css_alter().
 * @param string $type
 *   The type of array: "js" or "css".
 */
function _ajaxification_process_resources($data, $type) {
  $map = _ajaxification_resource_to_id_map();
  foreach ($data as $key => $_data) {
    if ($_data['type'] == 'file' || $_data['type'] == 'external') {
      if (!isset($map[$type][$key])) {
        $map[$type][$key] = base_convert(count($map['css']) + count($map['js']), 10, 36);
      }
    }
  }
  _ajaxification_resource_to_id_map($map);
  if (_ajaxification_get_configurations()) {
    // First cleanup old values if any.
    $javascript =& drupal_static('drupal_add_js', array());
    if (!empty($javascript['settings']['data'])) {
      foreach ($javascript['settings']['data'] as $key => $value) {
        if (is_array($value) && isset($value['ajaxification']['resource_to_id_map'][$type])) {
          unset($javascript['settings']['data'][$key]['ajaxification']['resource_to_id_map'][$type]);
        }
      }
    }
    unset($javascript);
    drupal_add_js(array('ajaxification' => array('resource_to_id_map' => $map)), 'setting');
  }
}

/**
 * Manages the "ajaxification_resource_to_id_map" variable.
 */
function _ajaxification_resource_to_id_map($set = NULL) {
  if ($set !== NULL) {
    variable_set('ajaxification_resource_to_id_map', $set);
  }
  $map = variable_get('ajaxification_resource_to_id_map', array('js' => array(), 'css' => array()));
  return $map;
}

/**
 * Returns absolute current URL.
 */
function _ajaxification_current_url() {
  return url($_GET['q'], array(
    'absolute' => TRUE,
    'query' => drupal_get_query_parameters(),
  ));
}

/**
 * Returns a response which triggers immediate page reload.
 */
function _ajaxification_page_reload() {
  print '<RELOAD>' . _ajaxification_current_url() . '</RELOAD>';
  drupal_exit();
}
